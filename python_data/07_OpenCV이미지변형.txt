이미지 크기 조절
cv2.resize(image, dsize, fx, fy, interpolation) | 이미지의 크기를 조절합니다
- dsize: Manual Size
- fx: 가로 비율
- fy: 세로 비율
- interpolation: 보간법
INTER_CUBIC: 사이즈를 크게 할 때 주로 사용합니다.
INTER_AREA: 사이즈를 작게 할 때 주로 사용합니다.
보간법은 사이즈가 변할 때 픽셀 사이의 값을 조절하는 방법을 의미합니다.

import cv2
image = cv2.imread('image.png')
cv2.imshow('Image', image)
cv2.waitKey(0)
expand = cv2.resize(image, None, fx=2.0, fy=2.0, interpolation=cv2.INTER_CUBIC)
cv2.imshow('Image', expand)
cv2.waitKey(0)
shrink = cv2.resize(image, None, fx=0.8, fy=0.8, interpolation=cv2.INTER_AREA)
cv2.imshow('Image', shrink)
cv2.waitKey(0)


이미지 위치 변경
cv2.warpAffine(image, M, dsize) | 이미지의 위치를 변경합니다.
- M: 변환 행렬
- dsize: Manual Size
- 변환 행렬은 다음과 같은 형태로 정의됩니다
    [M11  M12  M13
     M21  M22  M23]
- 이미지의 모든 좌표 (a, b)는 다음의 좌표로 이동됩니다
    (𝑀11 ∗ 𝑎 + 𝑀12 ∗ 𝑏 + 𝑀13, 𝑀21 ∗ 𝑎 + 𝑀22 ∗ 𝑏 + 𝑀23)
- 단순히 이미지의 위치를 변경할 때 변환 행렬은 다음과 같습니다.
[1  0  tx
 0  1  ty]
- 이미지의 모든 좌표 (a, b)는 다음의 좌표로 이동됩니다.
    (𝑎 + 𝑡𝑥, 𝑏 + 𝑡𝑦)

import cv2
import numpy as np
image = cv2.imread('image.png')
# 행과 열 정보만 저장합니다.
height, width = image.shape[:2]
M = np.float32([[1, 0, 50], [0, 1, 10]])
dst = cv2.warpAffine(image, M, (width, height))
cv2.imshow('Image', dst)
cv2.waitKey(0)


이미지 회전
- 회전 변환을 위한 기본적인 행렬은 다음과 같습니다.
[ 𝑐𝑜𝑠𝜃 −𝑠𝑖𝑛𝜃
  𝑠𝑖𝑛𝜃 𝑐𝑜𝑠𝜃 ]
- 이 때 무게 중심을 적용할 수 있는 회전 변환 식은 다음과 같이 정의할 수 있습니다.
𝛼 = 𝑠𝑐𝑎𝑙𝑒 ∗ 𝑐𝑜𝑠𝜃, 𝛽 = 𝑠𝑐𝑎𝑙𝑒 ∗ 𝑠𝑖𝑛𝜃 일 때
[  𝛼   𝛽   (1−𝛼)∗𝑐𝑒𝑛𝑡𝑒𝑟.𝑥−𝛽∗𝑐𝑒𝑛𝑡𝑒𝑟.y
  −𝛽  𝛼   𝛽∗𝑐𝑒𝑛𝑡𝑒𝑟.𝑥+(1−𝛼)∗𝑐𝑒𝑛𝑡𝑒𝑟.y  ]

cv2.getRotationMatrix2D(center, angle, scale) | 이미지 회전을 위한 변환 행렬을 생성합니다
- center: 회전 중심
- angle: 회전 각도
- scale: Scale Factor

import cv2
image = cv2.imread('image.png')
# 행과 열 정보만 저장합니다.
height, width = image.shape[:2]
M = cv2.getRotationMatrix2D((width / 2, height / 2), 90, 0.5)
dst = cv2.warpAffine(image, M, (width, height))
cv2.imshow('Image', dst)
cv2.waitKey(0)